image: ruby:2.3-jessie

stages:
 - deploy
 - production

variables:
  OUT_DIR: build


# Common steps required for each type of "Build" (staging.nethunter.com, store.nethunter.com, GitLab Pages, feature branches)
.setup_for_jekyll: &setup_for_jekyll |
  set -x
  set -e
  ruby -v
  sed -i '/jessie-updates/d' /etc/apt/sources.list
  apt-get update
  apt-get install -y locales zlib1g-dev gettext po4a linkchecker bundler unzip python3 rsync python3-babel
  grep '^en_US.UTF-8 UTF-8' /etc/locale.gen || echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
  locale-gen
  export LC_ALL=en_US.UTF-8
  bundle install --path vendor


#
# This is a manual task for building in preperation to deploy to
# https://staging.nethunter.com & https://store.nethunter.com.
# The intention is for it to be run locally using
# `gitlab-runner` each time a tag is found that is signed by a key in
# the whitelist keyring.  Invoke like so:
#
#  gitlab-runner exec docker staging.nethunter.com --pre-build-script ./prepare-for-deploy.py \
#    --docker-volumes "/root/deploy-whitelist-keyring.gpg:/root/.gnupg/pubring.gpg:ro" \
#    --docker-volumes `pwd`/_site:/builds/output
#
# And when it is finished, you should have a directory in _site/build/
# which includes the entire static site ready to be deployed to
# https://staging.nethunter.com & https://store.nethunter.com.
#
staging.nethunter.com:
  stage: production
  only:
    - tags@kalilinux/nethunter/store/nethunter-store-server
    - nethunter@kalilinux/nethunter/store/nethunter-store-server
  when: manual
  cache:
    paths: [ vendor/ruby ]

  script:
   - '[ ! -d /builds/output ] && echo "ERROR: /builds/output is not mounted inside docker!" && exit 1'
   - *setup_for_jekyll
   - 'echo "url: https://staging.nethunter.com" > userconfig.yml'
   - 'echo "baseurl: \"\"" >> userconfig.yml'
   - echo "Additional Jekyll config used for CI:" && cat userconfig.yml
   - bundle exec jekyll build -d $OUT_DIR --config _config.yml,userconfig.yml --trace
   - rsync -ax --delete $OUT_DIR /builds/staging/

store.nethunter.com:
  stage: production
  only:
    - tags@kalilinux/nethunter/store/nethunter-store-server
    - nethunter@kalilinux/nethunter/store/nethunter-store-server
  when: manual
  cache:
    paths: [ vendor/ruby ]

  script:
   - '[ ! -d /builds/output ] && echo "ERROR: /builds/output is not mounted inside docker!" && exit 1'
   - *setup_for_jekyll
   - bundle exec jekyll build -d $OUT_DIR
   - rsync -ax --delete $OUT_DIR /builds/store/

pages:
  stage: deploy
  cache:
    paths:
      - vendor/ruby
  artifacts:
    paths:
      - public
    expire_in: 1w
    when: always
  script:
   # use the 'gitlab ci' subset of languages
   - sed -i 's,^languages:,ignored_languages:,' _config.yml
   - sed -i 's,^gitlab_ci_languages:,languages:,' _config.yml
   - *setup_for_jekyll
   - ./tools/check-format-strings.py
   - ./tools/check-page-links.py
   - ./tools/check-do-not-translate
     ##- ./tools/i18n.sh md2po
     ##- git checkout po/*.pot  # ignore the newly generated timestamp
     ##- git --no-pager diff --ignore-all-space --name-only po/
   # This is where GitLab pages will deploy to by default (e.g. "https://kalilinux.gitlab.io/nethunter-store-website")
   # so we need to make sure that the Jekyll configuration understands this.
   - 'echo url: https://kalilinux.gitlab.io > userconfig.yml'
   - 'echo baseurl: /nethunter/store/$CI_PROJECT_NAME >> userconfig.yml'
   - echo "Additional Jekyll config used for CI:" && cat userconfig.yml
   - bundle exec jekyll build -d public --config _config.yml,userconfig.yml --trace
     ##- ./tools/prepare-multi-lang.sh public --no-type-maps
     ###- mkdir linkchecker/
     ###- ln -s ../public linkchecker/$CI_PROJECT_NAME
     ###- ruby -run -e httpd linkchecker/ -p 4000 2>&1 /dev/null &
     ###- linkchecker http://localhost:4000/$CI_PROJECT_NAME --config=.linkcheckerrc
     ### --ignore-url ".*/packages/[b-z].*" --ignore-url "/F-Droid\.apk(\.asc)?$"


spellcheck:
  except:
    - tags@kalilinux/nethunter/store/nethunter-store-server
    - nethunter@kalilinux/nethunter/store/nethunter-store-server
  image: node
  stage: deploy
  allow_failure: true
  variables:
    DEBIAN_FRONTEND: noninteractive
    LC_ALL: C.UTF-8
  script:
    - git fetch https://gitlab.com/kalilinux/nethunter/store/nethunter-store-website.git
    - for f in `git diff --name-only --diff-filter=d FETCH_HEAD...HEAD`; do
          export CHANGED="$CHANGED `echo $f | grep '\.md$' || true`";
      done
    - if [ -z "`echo $CHANGED | sed 's,\s*,,g'`" ]; then
          echo "No markdown files changed"; exit 0;
      else
          echo "Spellchecking $CHANGED";
      fi
    - apt-get -qy update
    - apt-get -qy install --no-install-recommends --allow-unauthenticated python3 python3-requests
    - ./tools/fetch-spelling-words.py >> .spelling
    - npm i markdown-spellcheck -g
    - mdspell --report --en-gb
        --ignore-numbers --ignore-acronyms
        $CHANGED


# Download and verify that the NetHunterStore.apk is signed by the right PGP
# key.  The only time that NetHunterStore.apk's signed metadata does not verify
# the APK is the initial download and install of the NetHunterStore itself.  An
# attacker could replace the NetHunterStore.apk and PGP signature on the
# website. The gpg key model is to trust only the key that is included
# in this script, so there is a test to check that it is starting with
# an empty keyring.

check_fdroid_apk:
  stage: deploy
  only:
    - schedules
    - nethunter@kalilinux/nethunter/store/nethunter-store-server
  image: alpine:3.5
  variables:
    apk: NetHunterStore.apk
    asc: NetHunterStore.apk.asc
    curl: "curl --silent --user-agent NetHunter-Store --retry 20"
    fingerprint: A059280A900687A9B197A562FEF44D71290987F0
  artifacts:
    name: "$apk-failed-${CI_JOB_ID}"
    paths:
      - $apk
      - $asc
    expire_in: 180 days
    when: on_failure
  script:
    - apk add --no-cache gnupg curl
    - "! (gpg --list-keys | grep pub)"
    - while ! gpg --keyserver pgp.mit.edu --recv-key $fingerprint; do sleep 10; done
    - gpg --list-key --fingerprint | tr -d '[:space:]' | grep $fingerprint
    - echo "${fingerprint}:6:" | gpg --import-ownertrust
    - $curl https://store.nethunter.com/$apk > $apk
    - $curl https://store.nethunter.com/$asc > $asc
    - sha256sum $apk
    - gpg --batch --trust-model always --verify $asc $apk

