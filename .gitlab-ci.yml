---

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#
## REF (Project): https://gitlab.com/kalilinux/nethunter/store/nethunter-store-website/-/environments
#
## Operate -> Environments -> New environment
#    - Name: production
#    - URL: https://store.nethunter.com

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#
## REF (Project): https://gitlab.com/kalilinux/nethunter/store/nethunter-store-website/-/settings/ci_cd
#

## Settings -> CI/CD -> Variables -> Expand -> Add variable
#   - Type: Variable
#   - Environments: production
#   - Visibility: Masked
#   - Flags
#       Protect variable: Enabled
#       Expand variable reference: Disabled
#   - Key: SSH_KEY
#   - Value: <kali_nethunter_store_os_private_key | base64 -w0; echo>

## Settings -> CI/CD -> Variables -> Expand -> Add variable
#   - Type: Variable
#   - Environments: production
#   - Visibility: Masked
#   - Flags
#       Protect variable: Enabled
#       Expand variable reference: Disabled
#   - Key: SSH_USER
#   - Value: <kali_nethunter_store_os_user>

## Settings -> CI/CD -> Variables -> Expand -> Add variable
#   - Type: Variable
#   - Environments: production
#   - Visibility: Masked
#   - Flags
#       Protect variable: Enabled
#       Expand variable reference: Disabled
#   - Key: SSH_HOST
#   - Value: <ansible_host>

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

## Debian 12
##   REF: https://hub.docker.com/_/debian
image: docker.io/debian:bookworm-slim


stages:
  - deploy
  - production
  - test


variables:
  LC_ALL: C.UTF-8
  DEBIAN_FRONTEND: noninteractive
  OUT_DIR: build


# This template needs to be in text block format since gitlab-runner
# exec cannot handling templates in list format.
#
# start with https:// even though ca-certificates is not installed
.apt-template: &apt-template |
  set -x
  set -e
  echo Etc/UTC > /etc/timezone
  echo 'quiet "1";' \
       'APT::Install-Recommends "0";' \
       'APT::Install-Suggests "0";' \
       'APT::Get::Assume-Yes "true";' \
       'Acquire::Retries "20";' \
       'Dpkg::Use-Pty "0";' \
      > /etc/apt/apt.conf.d/99gitlab
  sed -i s,http:,https:, /etc/apt/sources.list.d/debian.sources
  echo 'Acquire::https::Verify-Peer "false";' > /etc/apt/apt.conf.d/99nocacertificates
  apt-get update
  apt-get install ca-certificates
  rm -vf /etc/apt/apt.conf.d/99nocacertificates
  apt-get dist-upgrade
  set +x


# Common steps required for each type of "Build" (*.nethunter.com, GitLab Pages, feature branches)
#
# This template needs to be in text block format since gitlab-runner
# exec cannot handling templates in list format.
.setup_for_jekyll: &setup_for_jekyll |
  set -x
  set -e
  apt-get install --install-recommends \
    git \
    libunicode-linebreak-perl \
    po4a
  apt-get install \
    gettext \
    linkchecker \
    python3-babel \
    rsync \
    rubocop \
    ruby-bundler \
    ruby-git \
    ruby-jekyll-include-cache \
    ruby-jekyll-paginate-v2 \
    ruby-jekyll-redirect-from \
    ruby-json \
    ruby-loofah \
    ruby-nokogiri \
    ruby-rchardet \
    ruby-rouge \
    ruby-rspec \
    ruby-zip \
    unzip
  rm -vf Gemfile.lock
  bundle install --local --verbose
  #bash -x ./tools/i18n.sh
  sed -Ei \
    -e "s,^(url\x3a).*,\1 '$url'," \
    -e "s,^(baseurl\x3a).*,\1 '$baseurl'," \
    -e "s,^(fdroid-repo\x3a).*,\1 '$fdroid_repo'," \
    _config.yml
  set +x
  echo "Jekyll URL: $url$baseurl"
  echo "Jekyll config used for CI:"
  echo "<config>"
  cat _config.yml
  echo "</config>"


# This is a manual task for building in preparation to deploy to
# https://store.nethunter.com & https://staging.nethunter.com.
# The intention is for it to be run locally using
# `gitlab-runner` each time a tag is found that is signed by a key in
# the whitelist keyring.  Invoke like so:
#
#  gitlab-runner exec docker store.nethunter.com --pre-build-script ./prepare-for-deploy.py \
#    --docker-volumes "/root/deploy-whitelist-keyring.gpg:/root/.gnupg/pubring.gpg:ro" \
#    --docker-volumes $(pwd)/_site:/builds/output
#
# And when it is finished, you should have a directory in _site/build/
# which includes the entire static site ready to be deployed to
# https://store.nethunter.com & https://staging.nethunter.com.
.production_build:
  stage: production
  needs:
    - job: pages
  ## Need to stop using only:refs (been deprecated) ~ https://docs.gitlab.com/ee/ci/yaml/#onlyrefs--exceptrefs
  only:
    ## Tag added
    #- tags      # Alt: tags@kalilinux/nethunter/store/nethunter-store-website
    ## Branch name
    - nethunter # Alt: nethunter@kalilinux/nethunter/store/nethunter-store-website
  ## REF: https://gitlab.com/kalilinux/nethunter/store/nethunter-store-website/-/pipelines/latest
  when: manual
  ## For CI/CD variable
  environment:
    name: production
    url: https://${CI_JOB_NAME}
  variables:
    url: https://${CI_JOB_NAME}
    baseurl: ""
  script:
    #- '[ ! -d /builds/output ] && echo "ERROR: /builds/output is not mounted inside docker!" && exit 1'   # Using GitLab SaaS runners
    - *apt-template
    - *setup_for_jekyll
    - jekyll build -d $OUT_DIR --trace
    #- ./tools/prepare-multi-lang.sh $OUT_DIR # --no-type-maps # Not using/doing: Apache/i18n/PO/MultiView - _config.yml: default_lang/gitlab_ci_languages/languages
    #- ./tools/deploy-external-assets.sh $OUT_DIR              # Legacy upstream files
    #- rsync -ax --delete $OUT_DIR /builds/output/             # Using GitLab SaaS runners
    ## Upload to external host
    - 'command -v ssh-agent >/dev/null || ( apt-get install openssh-client )'   # Alt: 'command -v ssh-agent >/dev/null || ( apt-get --quiet update; apt-get --quiet install --yes --no-install-recommends openssh-client )'
    - eval "$( ssh-agent -s )"
    - echo "${SSH_KEY}" | base64 -d | ssh-add -
    - unset SSH_KEY
    - mkdir -pv ~/.ssh/
    - ssh-keyscan -t ssh-ed25519 ${SSH_HOST} > ~/.ssh/known_hosts
    - rsync -ax --delete ${OUT_DIR}/ ${SSH_USER}@${SSH_HOST}:${CI_JOB_NAME}
  after_script:
    - unset SSH_KEY
    - SSH_AGENT_PID="$( pidof ssh-agent )" ssh-agent -k   # otherwise: SSH_AGENT_PID not set, cannot kill agent    # Alt: kill -9 $( pidof ssh-agent ) # Alt: killall ssh-agent
    - shred -fv ~/.ssh/* || true
    - rm -rfv ~/.ssh


## REF: https://store.nethunter.com/
store.nethunter.com:
  extends:
    - .production_build
  variables:
    fdroid_repo: https://store.nethunter.com/repo


## REF: https://staging.nethunter.com/
staging.nethunter.com:
  extends:
    - .production_build
  variables:
    fdroid_repo: https://staging.nethunter.com/repo


## REF: https://kalilinux.gitlab.io/nethunter/store/nethunter-store-website/
pages:
  stage: deploy
  except:
    - triggers
  artifacts:
    paths:
      - public
    expire_in: 1w
    when: always
  variables:
    url: https://$CI_PROJECT_ROOT_NAMESPACE.$CI_PAGES_DOMAIN
    fdroid_repo: https://staging.nethunter.com/repo
  script:
    - (find _*/ -type f | grep -Ev '\.(html|json|md|rb|scss|xml|yaml)$')
         && (echo "ERROR The above files have a bad or missing file extension"; exit 1)
    - *apt-template
    - apt-get install
        curl
        python3-colorama
        python3-yaml
    - ./tools/trigger-spellcheckbot
    # use the 'gitlab ci' subset of languages
    - sed -i 's,^languages:,ignored_languages:,' _config.yml
    - sed -i 's,^gitlab_ci_languages:,languages:,' _config.yml
    # This is where GitLab pages will deploy to by default (e.g. "https://kalilinux.gitlab.io/nethunter/store/nethunter-store-website/")
    # so we need to make sure that the Jekyll configuration understands this.
    - baseurl=${CI_PROJECT_PATH/$CI_PROJECT_ROOT_NAMESPACE}
    - *setup_for_jekyll
    - ./tools/check-liquid-strings-var-names.py
    - ./tools/check-format-strings.py
    - ./tools/check-page-links.py
    - ./tools/check-yaml-front-matter.py
    - ./tools/check-do-not-translate
    - ./tools/check-markdown-headers-are-localizable.py
    - jekyll build -d public --trace --future
    - cp -v robots.txt.noindex public/robots.txt
    #- ./tools/prepare-multi-lang.sh $OUT_DIR # Not using/doing: Apache/i18n/PO/MultiView - _config.yml: default_lang/gitlab_ci_languages/languages
    - mkdir -pv $(dirname linkchecker/$baseurl)
    - ln -svf $(pwd)/public linkchecker/$baseurl
    - ruby -run -e httpd linkchecker/ -p 4000 > /dev/null 2>&1 &
    - linkchecker http://localhost:4000/$baseurl --config=.linkcheckerrc


spellcheckbot:
  stage: deploy
  allow_failure: true
  only:
    - triggers
  script:
    - *apt-template
    - apt-get install
        git
    - test -n ${FROM_CI_PROJECT_URL}
    - test -n ${FROM_CI_COMMIT_SHA}
    - git fetch ${FROM_CI_PROJECT_URL} ${FROM_CI_COMMIT_SHA}
    - for f in $(git diff --name-only --diff-filter=d HEAD...${FROM_CI_COMMIT_SHA}); do
          export CHANGED="$CHANGED $(echo $f | grep '\.md$' || true)";
      done
    - if [ -z "$(echo $CHANGED | sed 's,\s*,,g')" ]; then
          echo "No markdown files changed";
          exit 0;
      else
          echo "Spellchecking $CHANGED";
          git checkout --force ${FROM_CI_COMMIT_SHA};
      fi
    - apt-get install
        hunspell-en-us
        jq
        nodejs
        npm
        python3-gitlab
        python3-requests
    - ./tools/fetch-spelling-words.py >> .spelling
    # Android permission strings
    - jq --raw-output 'keys[]' _data/android_permissions.json >> .spelling
    # version strings
    - grep --no-filename -rEo 'v[0-9]+(:?\.[0-9]+)+' _* | sort -u >> .spelling
    - npm i markdown-spellcheck -g
    - (mdspell --report --en-gb --ignore-numbers --ignore-acronyms $CHANGED > output.txt 2>&1)
        || ./tools/spellcheckbot.py
    - cat output.txt


# Download and verify that the NetHunterStore.apk is signed by the right PGP
# key.  The only time that the NetHunter Store's signed metadata does not verify
# the APK is the initial download and install of the NetHunter Store itself.  An
# attacker could replace the NetHunterStore.apk and PGP signature on the
# website. The gpg key model is to trust only the key that is included
# in this script, so there is a test to check that it is starting with
# an empty keyring.
check_store_apk:
  stage: test
  needs:
    #- job: store.nethunter.com
    - job: pages # So that schedules can work
  only:
    - schedules
    - nethunter # Alt: nethunter@kalilinux/nethunter/store/nethunter-store-website
  ##   REF: https://hub.docker.com/_/alpine
  image: docker.io/alpine:3.16
  variables:
    apk: NetHunterStore.apk
    asc: NetHunterStore.apk.asc
    curl: "curl --fail --user-agent NetHunter-Store --retry 99"
    fingerprint: A059280A900687A9B197A562FEF44D71290987F0
    pip: pip3 --timeout 100 --retries 10
    domain: https://store.nethunter.com
    keyserver: pgp.mit.edu # https://keys.openpgp.org can strip all user IDs: "gpg: key FEF44D71290987F0: new key but contains no user ID - skipped"
    gpgfile: store@nethunter.com.gpg
  artifacts:
    name: "$apk-failed-${CI_JOB_ID}"
    paths:
      - $apk
      - $asc
    expire_in: 180 days
    when: on_failure
  script:
    - apk add --no-cache gnupg curl
    - "! (gpg --list-keys | grep pub)"
    - $curl $domain/$gpgfile | gpg --import || true
    - gpg --verbose --recv-key $fingerprint || true
    - gpg --keyserver $keyserver --recv-key $fingerprint || true
    - gpg --list-key $fingerprint
    - echo "${fingerprint}:6:" | gpg --import-ownertrust
    - $curl $domain/$apk > $apk
    - $curl $domain/$asc > $asc
    - ls -l $apk $asc
    - sha256sum $apk
    - gpg --batch --trust-model always --verify $asc $apk || (
          apk add --no-cache python3;
          python3 -m ensurepip;
          $pip install python-gitlab;
          ./tools/run-check-fdroid-apk-bot.py;
      )


# basic checks for dev setup
Vagrantfile:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE != "trigger"
      changes:
        - .gitlab-ci.yml
        - Vagrantfile
  script:
    - *apt-template
    - apt-get install
        kmod
        procps
        ruby
        vagrant
        vagrant-libvirt
    - export EXITVALUE=0
    - function set_error() { export EXITVALUE=1; printf "\x1b[31mERROR $(history|tail -2|head -1|cut -b 6-500)\x1b[0m\n"; }
    - ruby -c Vagrantfile || set_error
    - vagrant validate || set_error;
    - exit $EXITVALUE


yaml_front_matter:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE != "trigger"
      changes:
        - .gitlab-ci.yml
        - _docs/*.md
        - _pages/*.md
        - _posts/*.md
  script:
    - *apt-template
    - apt-get install
        python3-yaml
        yamllint
    - EXITVALUE=0
    - ls _docs/*.md _pages/*.md _posts/*.md || true
      | while read -r f; do
          echo $f;
          python3 -c "import re; print(re.match(r'---\n.*?---',  open('$f').read(), re.DOTALL).group())" > ${f}.yml;
          if ! yamllint ${f}.yml; then
              cat ${f}.yml;
              export EXITVALUE=1;
          fi;
      done
    - ./tools/check-yaml-front-matter.py
    - exit $EXITVALUE


yamllint:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE != "trigger"
      changes:
        - ".*.yml"
        - "*.yml"
        - ".yamllint"
  script:
    - *apt-template
    - apt-get install
        yamllint
    - yamllint .yamllint .*.yml _config.yml
